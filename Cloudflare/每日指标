// Variables used by Scriptable.
// These must be at the very top of the file. Do not edit.
// icon-color: orange; icon-glyph: cloud;

let title = 'Functions Metrics'
// 总量(免费账号为 100,000)
let total = 100000
// 如果知道就填上 不知道就会自动取 懒得做缓存了
let accountId = ''
// 默认取第几项账号
const accountIndex = 0
// 账号
const email = ''
// API key
const key = ''
// pages 项目名
const projectName = ''

const now = new Date()
now.setUTCHours(0, 0, 0, 0)
const startDate = now.toISOString()
const endDate = new Date().toISOString()

if (!accountId) {
  accountId = await getAccountId()
}
const scriptName = await getProductionScriptName()
const data = await getInvocations()
// console.log(data)
// const sum = data.reduce((a, b) => a + b, 0)

const { pagesSum = 0, workersSum = 0 } = await getSum()

class LineChart {
  // LineChart by https://kevinkub.de/

  constructor(width, height, values) {
    this.ctx = new DrawContext()
    this.ctx.size = new Size(width, height)
    this.values = values
  }

  _calculatePath() {
    let maxValue = Math.max(...this.values)
    let minValue = Math.min(...this.values)
    let difference = maxValue - minValue
    let count = this.values.length
    let step = this.ctx.size.width / (count - 1)
    let points = this.values.map((current, index, all) => {
      let x = step * index
      let y = this.ctx.size.height - ((current - minValue) / difference) * this.ctx.size.height
      return new Point(x, y)
    })
    return this._getSmoothPath(points)
  }

  _getSmoothPath(points) {
    let path = new Path()
    path.move(new Point(0, this.ctx.size.height))
    path.addLine(points[0])
    for (let i = 0; i < points.length - 1; i++) {
      let xAvg = (points[i].x + points[i + 1].x) / 2
      let yAvg = (points[i].y + points[i + 1].y) / 2
      let avg = new Point(xAvg, yAvg)
      let cp1 = new Point((xAvg + points[i].x) / 2, points[i].y)
      let next = new Point(points[i + 1].x, points[i + 1].y)
      let cp2 = new Point((xAvg + points[i + 1].x) / 2, points[i + 1].y)
      path.addQuadCurve(avg, cp1)
      path.addQuadCurve(next, cp2)
    }
    path.addLine(new Point(this.ctx.size.width, this.ctx.size.height))
    path.closeSubpath()
    return path
  }

  configure(fn) {
    let path = this._calculatePath()
    if (fn) {
      fn(this.ctx, path)
    } else {
      this.ctx.addPath(path)
      this.ctx.fillPath(path)
    }
    return this.ctx
  }
}
let widget = new ListWidget()
let chart = new LineChart(400, 200, data)
  .configure((ctx, path) => {
    ctx.opaque = false
    ctx.setFillColor(new Color('888888', 0.5))
    ctx.addPath(path)
    ctx.fillPath(path)
  })
  .getImage()
const t = widget.addText(title)
t.font = Font.boldSystemFont(12);
const p = widget.addText(`Pages: ${pagesSum.toLocaleString()}`)
p.font = Font.lightSystemFont(12)
const w = widget.addText(`Workers: ${workersSum.toLocaleString()}`)
w.font = Font.lightSystemFont(12)
const r = widget.addText(`剩余: ${(total - pagesSum - workersSum).toLocaleString()}`)
r.font = Font.lightSystemFont(12)
widget.addSpacer()
let image = widget.addImage(chart)

Script.setWidget(widget)
if (!config.runsInWidget) {
  await widget.presentSmall()
}
Script.complete()

async function getAccountId() {
  const req = new Request(`https://api.cloudflare.com/client/v4/accounts`)
  req.method = 'GET'
  req.headers = {
    'content-type': 'application/json',
    'X-AUTH-EMAIL': email,
    'X-AUTH-KEY': key,
  }
  const res = await req.loadJSON()
  // console.log(res)
  const name = res?.result?.[accountIndex]?.name
  const id = res?.result?.[accountIndex]?.id
  console.log(`默认取第 ${accountIndex} 项\n名称: ${name}, 账号 ID: ${id}`)
  if (!id) throw new Error('找不到账号 ID')
  return id
}
async function getProductionScriptName() {
  const req = new Request(
    `https://api.cloudflare.com/client/v4/accounts/${accountId}/pages/projects/${encodeURIComponent(projectName)}`
  )
  req.method = 'GET'
  req.headers = {
    'content-type': 'application/json',
    'X-AUTH-EMAIL': email,
    'X-AUTH-KEY': key,
  }
  const res = await req.loadJSON()
  // console.log(res)
  const name = res?.result?.production_script_name
  console.log(`脚本名称: ${name}`)
  if (!name) throw new Error('找不到脚本名称')
  return name
}
async function getInvocations() {
  const req = new Request(`https://api.cloudflare.com/client/v4/graphql`)
  req.method = 'POST'
  req.headers = {
    'content-type': 'application/json',
    'X-AUTH-EMAIL': email,
    'X-AUTH-KEY': key,
  }
  req.body = JSON.stringify({
    query: `query getPagesProjectAnalytics_minute($accountId: string, $scriptName: string, $startDate: string, $endDate: string) {
    viewer {
      accounts(filter: {accountTag: $accountId}) {
        invocations: pagesFunctionsInvocationsAdaptiveGroups(limit: 1000, filter: {datetime_geq: $startDate, datetime_lt: $endDate, scriptName: $scriptName}) {
          dimensions {
            datetimeMinute
          }
          sum {
            requests
          }
        }
      }
    }
  }`,
    variables: {
      accountId,
      scriptName,
      startDate,
      endDate,
    },
  })
  const res = await req.loadJSON()
  // console.log(res)
  const invocations = res?.data?.viewer?.accounts?.[accountIndex]?.invocations
  console.log(`范围: ${startDate} ~ ${endDate}\n默认取第 ${accountIndex} 项`)
  if (!invocations) throw new Error('找不到数据')
  return invocations.map(i => i?.sum?.requests)
}
async function getSum() {
  const req = new Request(`https://api.cloudflare.com/client/v4/graphql`)
  req.method = 'POST'
  req.headers = {
    'content-type': 'application/json',
    'X-AUTH-EMAIL': email,
    'X-AUTH-KEY': key,
  }
  req.body = JSON.stringify({
    query: `query getBillingMetrics($accountId: string!, $filter: AccountWorkersInvocationsAdaptiveFilter_InputObject) {
      viewer {
        accounts(filter: {accountTag: $accountId}) {
          pagesFunctionsInvocationsAdaptiveGroups(limit: 1000, filter: $filter) {
            sum {
              requests
            }
          }
          workersInvocationsAdaptive(limit: 10000, filter: $filter) {
            sum {
              requests
            }
          }
        }
      }
    }`,
    variables: {
      accountId,
      filter:{ datetime_geq: startDate, datetime_leq: endDate}
    },
  })
  const res = await req.loadJSON()
  // console.log(res)
  const pagesFunctionsInvocationsAdaptiveGroups = res?.data?.viewer?.accounts?.[accountIndex]?.pagesFunctionsInvocationsAdaptiveGroups
  const workersInvocationsAdaptive = res?.data?.viewer?.accounts?.[accountIndex]?.workersInvocationsAdaptive
  if (!pagesFunctionsInvocationsAdaptiveGroups && !workersInvocationsAdaptive) throw new Error('找不到数据')
  const pagesSum = pagesFunctionsInvocationsAdaptiveGroups.reduce((a, b) => a + b?.sum.requests, 0) 
  const workersSum = workersInvocationsAdaptive.reduce((a, b) => a + b?.sum.requests, 0) 
  console.log(`范围: ${startDate} ~ ${endDate}\n默认取第 ${accountIndex} 项`)
  
  return { pagesSum, workersSum }
}
